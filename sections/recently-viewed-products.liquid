{% comment %}
  Recently Viewed Products Section
  Inspired by the Zenis template design
{% endcomment %}

<div class="recently-viewed-products-section mt-12 md:mt-16">
  <!-- Section Header -->
  <div class="text-center mb-8">
    <h2 class="text-2xl md:text-3xl font-bold text-gray-900 dark:text-white mb-4">{{ section.settings.heading }}</h2>
    {% if section.settings.subheading != blank %}
      <p class="text-gray-600 dark:text-gray-400 max-w-3xl mx-auto">{{ section.settings.subheading }}</p>
    {% endif %}
  </div>
  
  <!-- Products Grid -->
  <div id="recently-viewed-products-grid" class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 md:gap-6">
    <!-- Products will be dynamically added here via JavaScript -->
  </div>
  
  <!-- Empty State -->
  <div id="recently-viewed-empty" class="text-center py-12 hidden">
    <svg class="w-16 h-16 mx-auto text-gray-300 dark:text-gray-600 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
    </svg>
    <h3 class="text-xl font-medium text-gray-900 dark:text-white mb-2">No recently viewed products</h3>
    <p class="text-gray-600 dark:text-gray-400 mb-6">Browse our store to discover amazing products.</p>
    <a href="/collections/all" class="inline-flex items-center px-6 py-3 bg-primary hover:bg-primary-dark text-white font-medium rounded-lg transition-colors duration-200">
      Start Shopping
      <svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3"></path>
      </svg>
    </a>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Get current product ID
    const currentProductId = {{ product.id | json }};
    
    // Get recently viewed products from localStorage
    let recentlyViewed = JSON.parse(localStorage.getItem('recentlyViewed') || '[]');
    
    // Add current product to recently viewed
    if (!recentlyViewed.includes(currentProductId)) {
      recentlyViewed.unshift(currentProductId);
      
      // Limit to 10 products
      if (recentlyViewed.length > 10) {
        recentlyViewed = recentlyViewed.slice(0, 10);
      }
      
      // Save back to localStorage
      localStorage.setItem('recentlyViewed', JSON.stringify(recentlyViewed));
    }
    
    // Remove current product from the list for display
    recentlyViewed = recentlyViewed.filter(id => id !== currentProductId);
    
    // Get the grid and empty state elements
    const productsGrid = document.getElementById('recently-viewed-products-grid');
    const emptyState = document.getElementById('recently-viewed-empty');
    
    // If no recently viewed products, show empty state
    if (recentlyViewed.length === 0) {
      productsGrid.classList.add('hidden');
      emptyState.classList.remove('hidden');
      return;
    }
    
    // Limit to the number of products to show
    const productsToShow = Math.min(recentlyViewed.length, {{ section.settings.products_to_show }});
    recentlyViewed = recentlyViewed.slice(0, productsToShow);
    
    // Fetch product data for each recently viewed product
    const fetchPromises = recentlyViewed.map(productId => {
      return fetch(`/products.json?limit=1&product_id=${productId}`)
        .then(response => response.json())
        .then(data => {
          if (data.products && data.products.length > 0) {
            return data.products[0];
          }
          return null;
        })
        .catch(error => {
          console.error('Error fetching product data:', error);
          return null;
        });
    });
    
    // Wait for all product data to be fetched
    Promise.all(fetchPromises)
      .then(products => {
        // Filter out null products
        const validProducts = products.filter(product => product !== null);
        
        // If no valid products, show empty state
        if (validProducts.length === 0) {
          productsGrid.classList.add('hidden');
          emptyState.classList.remove('hidden');
          return;
        }
        
        // Show the grid, hide empty state
        productsGrid.classList.remove('hidden');
        emptyState.classList.add('hidden');
        
        // Clear the grid
        productsGrid.innerHTML = '';
        
        // Add each product to the grid
        validProducts.forEach(product => {
          const productCard = createProductCard(product);
          productsGrid.appendChild(productCard);
        });
      });
    
    // Function to create a product card
    function createProductCard(product) {
      const card = document.createElement('div');
      card.className = 'product-card bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 overflow-hidden hover:shadow-md transition-shadow duration-300';
      
      // Get featured image
      const featuredImage = product.images && product.images.length > 0 ? 
        product.images[0].src : 
        '';
      
      // Get product URL
      const productUrl = `/products/${product.handle}`;
      
      // Get product price
      const price = product.variants && product.variants.length > 0 ? 
        product.variants[0].price : 
        '';
      
      // Get compare at price
      const compareAtPrice = product.variants && product.variants.length > 0 ? 
        product.variants[0].compare_at_price : 
        null;
      
      // Check if product is available
      const isAvailable = product.variants && product.variants.length > 0 ? 
        product.variants[0].available : 
        false;
      
      // Format price
      const formatMoney = (cents) => {
        return '$' + (cents / 100).toFixed(2);
      };
      
      // Build card HTML
      card.innerHTML = `
        <div class="relative">
          <a href="${productUrl}" class="block">
            <div class="aspect-w-1 aspect-h-1 w-full">
              ${featuredImage ? 
                `<img src="${featuredImage}" alt="${product.title}" class="w-full h-full object-cover">` : 
                `<div class="w-full h-full bg-gray-200 dark:bg-gray-700 flex items-center justify-center">
                  <svg class="w-16 h-16 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                  </svg>
                </div>`
              }
            </div>
          </a>
          
          <!-- Product Badges -->
          <div class="absolute top-2 left-2 flex flex-col gap-1">
            ${compareAtPrice && compareAtPrice > price ? 
              `<span class="bg-primary text-white text-xs font-bold px-2 py-1 rounded">
                Sale
              </span>` : 
              ''
            }
            
            ${!isAvailable ? 
              `<span class="bg-gray-700 text-white text-xs font-bold px-2 py-1 rounded">
                Sold Out
              </span>` : 
              ''
            }
          </div>
          
          <!-- Quick Actions -->
          <div class="absolute top-2 right-2 flex flex-col gap-2">
            <button 
              type="button" 
              onclick="quickView('${product.handle}')" 
              class="bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 p-2 rounded-full shadow-sm hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors duration-200" 
              aria-label="Quick view"
            >
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
              </svg>
            </button>
            
            <button 
              type="button" 
              onclick="toggleWishlist('${product.handle}')" 
              class="wishlist-toggle bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 p-2 rounded-full shadow-sm hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors duration-200" 
              aria-label="Add to wishlist"
              data-product-handle="${product.handle}"
            >
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>
              </svg>
            </button>
            
            <button 
              type="button" 
              onclick="addToCompare('${product.handle}')" 
              class="bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 p-2 rounded-full shadow-sm hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors duration-200" 
              aria-label="Add to compare"
            >
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
              </svg>
            </button>
          </div>
        </div>
        
        <div class="p-4">
          <!-- Product Title -->
          <h3 class="text-gray-900 dark:text-white font-medium mb-2">
            <a href="${productUrl}" class="hover:text-primary transition-colors duration-200">${product.title}</a>
          </h3>
          
          <!-- Product Price -->
          <div class="flex items-center">
            ${compareAtPrice && compareAtPrice > price ? 
              `<span class="text-primary font-bold">${formatMoney(price)}</span>
              <span class="text-gray-400 line-through text-sm ml-2">${formatMoney(compareAtPrice)}</span>` : 
              `<span class="text-primary font-bold">${formatMoney(price)}</span>`
            }
          </div>
        </div>
      `;
      
      return card;
    }
  });
</script>

{% schema %}
{
  "name": "Recently Viewed",
  "tag": "section",
  "class": "recently-viewed-section",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "Recently Viewed"
    },
    {
      "type": "text",
      "id": "subheading",
      "label": "Subheading",
      "default": "Products you've recently viewed"
    },
    {
      "type": "range",
      "id": "products_to_show",
      "label": "Number of products",
      "min": 2,
      "max": 8,
      "step": 1,
      "default": 4
    }
  ],
  "presets": [
    {
      "name": "Recently Viewed",
      "category": "Product"
    }
  ]
}
{% endschema %}