{% if product.available %}
  <div id="sticky-add-to-cart" class="fixed bottom-0 left-0 w-full bg-white dark:bg-gray-800 border-t border-gray-200 dark:border-gray-600 py-3 px-4 md:hidden z-50 transform transition-transform duration-300" style="transform: translateY(100%); bottom: 56px;">
    <div class="flex items-center justify-between mb-3">
      <div class="flex items-center">
        {% if product.featured_image %}
          <img src="{{ product.featured_image | img_url: 'small' }}" alt="{{ product.title }}" class="w-10 h-10 object-cover rounded-md mr-3">
        {% endif %}
        <div>
          <h3 class="text-sm font-medium text-deep-moss-black dark:text-mist-gray truncate max-w-[150px]">{{ product.title }}</h3>
          <p class="text-sm text-forest-shadow dark:text-herbal-cream">{{ product.price | money }}</p>
        </div>
      </div>
      
      <button id="sticky-close" class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200" aria-label="Close sticky add to cart">
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>
    
    <form method="post" action="/cart/add" id="sticky-add-to-cart-form" class="space-y-3">
      {% if product.variants.size > 1 %}
        <input type="hidden" name="id" id="sticky-variant-id" value="{{ product.variants.first.id }}">
      {% else %}
        <input type="hidden" name="id" value="{{ product.variants.first.id }}">
      {% endif %}

      <div class="grid grid-cols-2 gap-3">
        {% if product.variants.size > 1 %}
          <div>
            <label for="sticky-variant-selector" class="block text-xs font-medium text-deep-moss-black dark:text-mist-gray mb-1">
              {{ product.options_with_values.first.name }}
            </label>
            <select id="sticky-variant-selector" class="w-full px-3 py-2 text-sm rounded-lg border border-mist-gray dark:border-forest-shadow bg-white dark:bg-deep-moss-black/50 text-deep-moss-black dark:text-mist-gray focus:ring-2 focus:ring-olive-verde focus:border-olive-verde">
              {% for variant in product.variants %}
                <option value="{{ variant.id }}">{{ variant.title }}</option>
              {% endfor %}
            </select>
          </div>
        {% endif %}
        
        <div>
          <label for="sticky-quantity" class="block text-xs font-medium text-deep-moss-black dark:text-mist-gray mb-1">Quantity</label>
          <div class="flex rounded-lg border border-mist-gray dark:border-forest-shadow overflow-hidden">
            <button type="button" id="sticky-quantity-minus" class="px-3 py-2 bg-gray-100 dark:bg-forest-shadow text-deep-moss-black dark:text-mist-gray hover:bg-gray-200 dark:hover:bg-forest-shadow/70 focus:outline-none">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4"></path>
              </svg>
            </button>
            <input type="number" id="sticky-quantity" name="quantity" value="1" min="1" class="w-full text-center border-0 focus:ring-0 bg-white dark:bg-deep-moss-black text-deep-moss-black dark:text-mist-gray">
            <button type="button" id="sticky-quantity-plus" class="px-3 py-2 bg-gray-100 dark:bg-forest-shadow text-deep-moss-black dark:text-mist-gray hover:bg-gray-200 dark:hover:bg-forest-shadow/70 focus:outline-none">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
              </svg>
            </button>
          </div>
        </div>
      </div>

      <div class="flex space-x-2">
        <button type="submit" class="btn-primary flex-1 py-3 flex items-center justify-center">
          <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z"></path>
          </svg>
          Add to Cart
        </button>
        
        <button type="button" onclick="toggleWishlist('{{ product.handle }}')" class="btn-secondary py-3 px-4" aria-label="Add to Wishlist">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>
          </svg>
        </button>
      </div>
    </form>
    
    <div id="sticky-add-to-cart-message" class="toast toast-success hidden mt-3 py-2 px-3 text-sm">
      <div class="flex items-center">
        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
        </svg>
        <span>Added to cart!</span>
      </div>
    </div>
  </div>

  <!-- Sticky Add to Cart Trigger Button -->
  <div class="fixed bottom-16 right-4 md:hidden z-50">
    <button id="sticky-add-to-cart-trigger" class="bg-olive-verde text-white rounded-full p-3 shadow-lg hover:bg-forest-shadow transition-colors duration-300 animate-pulse-gentle" aria-label="Quick add to cart">
      <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
      </svg>
    </button>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Elements
      const stickyAddToCart = document.getElementById('sticky-add-to-cart');
      const stickyTrigger = document.getElementById('sticky-add-to-cart-trigger');
      const stickyClose = document.getElementById('sticky-close');
      const variantSelector = document.getElementById('sticky-variant-selector');
      const variantIdInput = document.getElementById('sticky-variant-id');
      const quantityInput = document.getElementById('sticky-quantity');
      const quantityMinus = document.getElementById('sticky-quantity-minus');
      const quantityPlus = document.getElementById('sticky-quantity-plus');
      const addToCartForm = document.getElementById('sticky-add-to-cart-form');
      const addToCartMessage = document.getElementById('sticky-add-to-cart-message');
      const bottomNav = document.querySelector('.fixed.bottom-0');
      
      // Toggle sticky add to cart
      if (stickyTrigger && stickyAddToCart) {
        stickyTrigger.addEventListener('click', function() {
          stickyAddToCart.style.transform = 'translateY(0)';
          stickyTrigger.style.display = 'none';
        });
      }
      
      if (stickyClose && stickyAddToCart && stickyTrigger) {
        stickyClose.addEventListener('click', function() {
          stickyAddToCart.style.transform = 'translateY(100%)';
          setTimeout(() => {
            stickyTrigger.style.display = 'block';
          }, 300);
        });
      }
      
      // Variant selector
      if (variantSelector && variantIdInput) {
        variantSelector.addEventListener('change', function() {
          variantIdInput.value = this.value;
        });
      }
      
      // Quantity controls
      if (quantityMinus && quantityInput) {
        quantityMinus.addEventListener('click', function() {
          const currentValue = parseInt(quantityInput.value);
          if (currentValue > 1) {
            quantityInput.value = currentValue - 1;
          }
        });
      }
      
      if (quantityPlus && quantityInput) {
        quantityPlus.addEventListener('click', function() {
          const currentValue = parseInt(quantityInput.value);
          quantityInput.value = currentValue + 1;
        });
      }
      
      // Add to cart functionality
      if (addToCartForm) {
        addToCartForm.addEventListener('submit', function(event) {
          event.preventDefault();
          const formData = new FormData(this);
          
          // Show loading state
          const submitButton = this.querySelector('button[type="submit"]');
          const originalText = submitButton.innerHTML;
          submitButton.innerHTML = '<svg class="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>';
          submitButton.disabled = true;

          fetch('/cart/add.js', {
            method: 'POST',
            body: formData
          })
          .then(response => response.json())
          .then(data => {
            // Reset button
            submitButton.innerHTML = originalText;
            submitButton.disabled = false;
            
            // Show success message
            addToCartMessage.classList.remove('hidden');
            setTimeout(() => {
              addToCartMessage.classList.add('hidden');
            }, 3000);
            
            // Update cart count
            fetch('/cart.js')
              .then(response => response.json())
              .then(cart => {
                const cartCountElements = document.querySelectorAll('.cart-count');
                cartCountElements.forEach(element => {
                  element.textContent = cart.item_count;
                  if (cart.item_count === 0) {
                    element.classList.add('hidden');
                  } else {
                    element.classList.remove('hidden');
                  }
                });
              });
          })
          .catch(error => {
            console.error('Error adding to cart:', error);
            submitButton.innerHTML = originalText;
            submitButton.disabled = false;
          });
        });
      }
      
      // Adjust position based on bottom nav
      if (bottomNav && stickyAddToCart) {
        const bottomNavHeight = bottomNav.offsetHeight;
        stickyAddToCart.style.bottom = bottomNavHeight + 'px';
      }
    });
  </script>
{% endif %}

{% schema %}
{
  "name": "Sticky Add to Cart",
  "settings": []
}
{% endschema %}
