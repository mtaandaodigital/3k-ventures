{% comment %}
  Bottom Navigation for Mobile
  This snippet creates a fixed bottom navigation bar for mobile devices
{% endcomment %}

<div class="md:hidden fixed bottom-0 left-0 right-0 bg-white dark:bg-gray-900 border-t border-gray-200 dark:border-gray-800 z-40">
  <div class="grid grid-cols-5 h-16">
    <a href="/" class="flex flex-col items-center justify-center text-gray-500 dark:text-gray-400 hover:text-primary">
      <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"></path>
      </svg>
      <span class="text-xs mt-1">Home</span>
    </a>
    
    <button id="mobile-categories-toggle-bottom" class="flex flex-col items-center justify-center text-gray-500 dark:text-gray-400 hover:text-primary w-full">
      <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z"></path>
      </svg>
      <span class="text-xs mt-1">Categories</span>
    </button>
    
    <button id="mobile-search-toggle" class="flex flex-col items-center justify-center text-gray-500 dark:text-gray-400 hover:text-primary w-full">
      <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
      </svg>
      <span class="text-xs mt-1">Search</span>
    </button>
    
    <button id="cart-toggle-bottom" class="flex flex-col items-center justify-center text-gray-500 dark:text-gray-400 hover:text-primary w-full">
      <div class="relative">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z"></path>
        </svg>
        <span class="absolute -top-2 -right-2 bg-primary text-white text-xs font-bold rounded-full w-5 h-5 flex items-center justify-center cart-count">
          {{ cart.item_count }}
        </span>
      </div>
      <span class="text-xs mt-1">Cart</span>
    </button>
    
    <a href="{% if customer %}{{ routes.account_url }}{% else %}{{ routes.account_login_url }}{% endif %}" class="flex flex-col items-center justify-center text-gray-500 dark:text-gray-400 hover:text-primary">
      <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
      </svg>
      <span class="text-xs mt-1">Account</span>
    </a>
  </div>
</div>

<!-- Mobile Search Overlay -->
<div id="mobile-search-overlay" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden">
  <div class="absolute inset-x-0 top-0 bg-white dark:bg-gray-900 p-4 shadow-lg">
    <div class="flex items-center mb-4">
      <h3 class="text-lg font-medium text-gray-900 dark:text-white flex-grow">Search Products</h3>
      <button id="mobile-search-close" class="text-gray-500 dark:text-gray-400 hover:text-primary">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>
    
    <form action="/search" method="get" class="relative">
      <input type="text" name="q" placeholder="Search for products..." class="w-full px-4 py-3 border border-gray-300 dark:border-gray-700 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary transition-all duration-200 bg-white dark:bg-gray-800 text-gray-900 dark:text-white">
      <button type="submit" class="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500 dark:text-gray-400 hover:text-primary transition-colors duration-200">
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
        </svg>
      </button>
    </form>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Mobile Search Toggle
    const mobileSearchToggle = document.getElementById('mobile-search-toggle');
    const mobileSearchOverlay = document.getElementById('mobile-search-overlay');
    const mobileSearchClose = document.getElementById('mobile-search-close');
    
    if (mobileSearchToggle && mobileSearchOverlay && mobileSearchClose) {
      mobileSearchToggle.addEventListener('click', function() {
        mobileSearchOverlay.classList.remove('hidden');
        document.body.classList.add('overflow-hidden');
      });
      
      mobileSearchClose.addEventListener('click', function() {
        mobileSearchOverlay.classList.add('hidden');
        document.body.classList.remove('overflow-hidden');
      });
    }
    
    // Mobile Categories Toggle
    const mobileCategoriesToggleBottom = document.getElementById('mobile-categories-toggle-bottom');
    const mobileCategoriesMenu = document.getElementById('mobile-categories-menu');
    
    if (mobileCategoriesToggleBottom && mobileCategoriesMenu) {
      mobileCategoriesToggleBottom.addEventListener('click', function() {
        mobileCategoriesMenu.classList.remove('hidden');
        document.body.classList.add('overflow-hidden');
      });
    }
    
    // Cart Toggle
    const cartToggleBottom = document.getElementById('cart-toggle-bottom');
    const cartDrawer = document.getElementById('cart-drawer');
    
    if (cartToggleBottom && cartDrawer) {
      cartToggleBottom.addEventListener('click', function() {
        cartDrawer.classList.remove('translate-x-full');
        document.body.classList.add('overflow-hidden');
      });
    }
    
    // Update wishlist count if functionality exists
    if (typeof updateWishlistCount === 'function') {
      updateWishlistCount();
    }
    
    // Add padding to the bottom of the page to account for the fixed bottom nav
    const bottomNav = document.querySelector('.fixed.bottom-0');
    if (bottomNav) {
      const bottomNavHeight = bottomNav.offsetHeight;
      document.body.style.paddingBottom = bottomNavHeight + 'px';
    }
  });
</script>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Update wishlist count if functionality exists
    updateWishlistCount();
    
    // Add padding to the bottom of the page to account for the fixed bottom nav
    const bottomNav = document.querySelector('.fixed.bottom-0');
    if (bottomNav) {
      const bottomNavHeight = bottomNav.offsetHeight;
      document.body.style.paddingBottom = bottomNavHeight + 'px';
    }
  });
  
  /**
   * Update wishlist count
   */
  function updateWishlistCount() {
    // First try localStorage (primary storage method)
    let wishlistItems = [];
    try {
      wishlistItems = JSON.parse(localStorage.getItem('wishlist') || '[]');
    } catch (e) {
      console.error('Error parsing wishlist from localStorage:', e);
      
      // Fallback to cookies if localStorage fails
      try {
        const cookieValue = getCookie('wishlist');
        if (cookieValue) {
          wishlistItems = JSON.parse(cookieValue);
        }
      } catch (e) {
        console.error('Error parsing wishlist from cookies:', e);
      }
    }
    
    const wishlistCountElements = document.querySelectorAll('.wishlist-count');
    
    wishlistCountElements.forEach(element => {
      element.textContent = wishlistItems.length;
      if (wishlistItems.length > 0) {
        element.classList.remove('hidden');
      } else {
        element.classList.add('hidden');
      }
    });
  }
  
  /**
   * Get cookie value by name
   */
  function getCookie(name) {
    let nameEQ = name + "=";
    let ca = document.cookie.split(';');
    for (let i = 0; i < ca.length; i++) {
      let c = ca[i];
      while (c.charAt(0) == ' ') c = c.substring(1, c.length);
      if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
    }
    return null;
  }
  
  // Listen for storage events to update wishlist count when it changes
  window.addEventListener('storage', function(e) {
    if (e.key === 'wishlist') {
      updateWishlistCount();
    }
  });
</script>
